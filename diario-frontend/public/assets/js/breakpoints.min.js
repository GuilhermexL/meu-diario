/* breakpoints.js v1.0 | @ajlkn | MIT licensed - VersÃ£o Corrigida */
(function() {
  
  var t = {
    list: null,
    media: {},
    events: [],
    init: function(e) {
      this.list = e;
      window.addEventListener("resize", this.poll.bind(this));
      window.addEventListener("orientationchange", this.poll.bind(this));
      window.addEventListener("load", this.poll.bind(this));
      window.addEventListener("fullscreenchange", this.poll.bind(this));
    },
    active: function(e) {
      var n, a, s, i, r, d, c;
      if (!(e in this.media)) {
        if (
          (">=" === e.substr(0, 2)
            ? ((a = "gte"), (n = e.substr(2)))
            : "<=" === e.substr(0, 2)
            ? ((a = "lte"), (n = e.substr(2)))
            : ">" === e.substr(0, 1)
            ? ((a = "gt"), (n = e.substr(1)))
            : "<" === e.substr(0, 1)
            ? ((a = "lt"), (n = e.substr(1)))
            : "!" === e.substr(0, 1)
            ? ((a = "not"), (n = e.substr(1)))
            : ((a = "eq"), (n = e)),
          n && n in this.list)
        ) {
          if (((i = this.list[n]), Array.isArray(i))) {
            if (((r = parseInt(i[0])), (d = parseInt(i[1])), isNaN(r))) {
              if (isNaN(d)) return false;
              c = i[1].substr(String(d).length);
            } else {
              c = i[0].substr(String(r).length);
            }
            if (isNaN(r)) {
              switch (a) {
                case "gte": s = "screen"; break;
                case "lte": s = "screen and (max-width: " + d + c + ")"; break;
                case "gt": s = "screen and (min-width: " + (d + 1) + c + ")"; break;
                case "lt": s = "screen and (max-width: -1px)"; break;
                case "not": s = "screen and (min-width: " + (d + 1) + c + ")"; break;
                default: s = "screen and (max-width: " + d + c + ")";
              }
            } else if (isNaN(d)) {
              switch (a) {
                case "gte": s = "screen and (min-width: " + r + c + ")"; break;
                case "lte": s = "screen"; break;
                case "gt": s = "screen and (max-width: -1px)"; break;
                case "lt": s = "screen and (max-width: " + (r - 1) + c + ")"; break;
                case "not": s = "screen and (max-width: " + (r - 1) + c + ")"; break;
                default: s = "screen and (min-width: " + r + c + ")";
              }
            } else {
              switch (a) {
                case "gte": s = "screen and (min-width: " + r + c + ")"; break;
                case "lte": s = "screen and (max-width: " + d + c + ")"; break;
                case "gt": s = "screen and (min-width: " + (d + 1) + c + ")"; break;
                case "lt": s = "screen and (max-width: " + (r - 1) + c + ")"; break;
                case "not": s = "screen and (max-width: " + (r - 1) + c + "), screen and (min-width: " + (d + 1) + c + ")"; break;
                default: s = "screen and (min-width: " + r + c + ") and (max-width: " + d + c + ")";
              }
            }
          } else {
            s = "(" === i.charAt(0) ? "screen and " + i : i;
          }
          this.media[e] = !!s && s;
        }
      }
      return this.media[e] !== false && window.matchMedia(this.media[e]).matches;
    },
    on: function(e, n) {
      this.events.push({ query: e, handler: n, state: false });
      if (this.active(e)) n();
    },
    poll: function() {
      for (var e = 0; e < this.events.length; e++) {
        var n = this.events[e];
        if (this.active(n.query)) {
          if (!n.state) {
            n.state = true;
            n.handler();
          }
        } else if (n.state) {
          n.state = false;
        }
      }
    }
  };

  // Exporta como global
  window.breakpoints = {
    on: t.on.bind(t),
    active: t.active.bind(t),
    refresh: t.poll.bind(t),
    _: t
  };
})();